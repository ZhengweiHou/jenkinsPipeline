pipeline{
    agent any
    options{
        retry(1)
    }
    
    environment {
    	
    	// 自定义配置
    	gitl_url = "$gitl_url"
        gitl_user = "$gitl_user"
        gitl_branch = "$gitl_branch"
        build_child_dir = "$build_child_dir"
    
		// 其他
        workspace = pwd()
        codedir = "code"
        mvnHome = "$MAVEN_HOME"
        jdkHome = "$JAVA_HOME"
        
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${PATH}"
        

    }
    
  
    stages{
        stage('HookConfig') { 
            steps{
                script{
                	//if(!githook_object_kind.trim().isEmpty() && githook_object_kind.trim() != 'null'){
					if (env.githook_object_kind != null && !env.githook_object_kind.trim().isEmpty()) {
                		echo "本次构建由hook触发"
                		
                		// gitlabhook 相关配置信息，依赖Generic Webhook Trigger插件配置Post content parameters [Variable:githook, Expression:$]
				        githook_ref = "$githook_ref" // refs/heads/master
				        githook_repository_name = "$githook_repository_name"	// spring-boot-parent-hzw
				        githook_object_kind = "$githook_object_kind"
				        
                	    // 检查hook触发的项目名和该job目标git路径是否匹配
	                    if (!gitl_url.matches(".*/" + githook_repository_name + ".git")){
	                        error "目标项目${githook_repository_name}无法匹配目标地址${gitl_url}"
	                    }
	                    
	                    def ref_list = githook_ref.tokenize('/')
	                    def ref_type = ref_list[1]	// heads、tags
	                    def ref_name = ref_list[2]	// master、v0.1
	                    
	                    // 设置hook中分支名
	                    gitl_branch = ref_name
                	}else{
                		echo "本次构建非hook触发"
                	}
                }
            }
        }
        
        stage('InitConfig'){
        	steps{
        		script{
        			echo "初始化构建参数"
        		}
        	}
        }
        
        stage('CodeCheck') {
            steps{
                // git branch: "master", credentialsId: 'd87b6196-bae0-4195-88d6-7f85d76f52b1', url: 'http://172.27.0.2/gitlabtest/spring-boot-parent-hzw.git'
                script{
                    url="${gitl_url}"
                    branch="${gitl_branch}"   // 目标分支也可以是tag号
                    credentialsId="${gitl_user}"
                    
                    echo "=checkout url:${url} branch:${branch}="
                }
             
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: "$branch"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [
                        [$class: 'CleanBeforeCheckout'], 
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: "$codedir"], 
                        [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', timeout: 3, trackingSubmodules: false]
                    ], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                        [credentialsId: "$credentialsId", url: "$url"]
                    ]
                ]) 
            }
        }
        
        stage('Build') {
     
            steps{
            	script{
	            	echo "开始构建..."
					builddir="${workspace}/${codedir}"
					
					if (env.build_child_dir != null && !env.build_child_dir.trim().isEmpty() && env.build_child_dir.trim()!='null') {
						echo "已配置构建子目录：${build_child_dir}"
						builddir="${builddir}/${build_child_dir}"
					}
					
					if (env.build_mvn_opt != null && !env.build_mvn_opt.trim().isEmpty() && env.build_mvn_opt.trim()!='null') {
						echo "已配置构建指令：${build_mvn_opt}"
						build_mvn_opt="${build_mvn_opt}"
					}else{
						echo "未配置构建指令，使用默认指令：clean install"
						build_mvn_opt="clean install"
					}
					
					echo "构建目录为：${builddir},构建指令：${build_mvn_opt}"
            	}
				
            	// maven构建生成二进制包
                dir("${builddir}"){
            		
            		// 此处需jenkins安装插件：Pipeline Maven Integration
            		withMaven() {
                		//sh "mvn clean deploy -Dmaven.test.skip=true"
                		
                		sh "mvn ${build_mvn_opt}"
        			}
            		
                }
            }
        }
    }
    

}
